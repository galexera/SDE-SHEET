  Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
You must write an algorithm that runs in O(n) time.

  Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
 
 
 Solution : 
  Brute force : 
  1) Sort the array
  2) find max consecutive seq
  Arrays.sort(nums)
  for(int i=1;i<nums.length;i++)
  { if(nums[i] == nums[i-1] + 1) -> count++
    else ans = max(ans,count) , count = 1
  }
  Time complexity : 0(nlogn)
  Space complexity : o(1)
  
  
  Optimized : 
  1) insert nums into hashset
  2) Traverse through each element
    a) if element-1 is available in set donot process that element(becoz we need to find maximum sequence t4 we can start the streak from the smallest one(while loop)
    b) If smallest element encountered -> count consecutive elements and update the ans
   3)return ans
   
   Code :
   Set<Integer> set = new HashSet<>();
        for(int x : nums)
        {
            set.add(x);
        }
        int ans = 0;
        for(int i=0;i<nums.length;i++)
        {
            if(!set.contains(nums[i]-1))
            {
                int streak = 0;
                int var = nums[i];
                while(set.contains(var))
                {
                    streak++;
                    var++;
                }
                ans = Math.max(ans , streak);
                
            }
        }
        return ans;
        
        Time : O(n) for putting into set + O(n) for traversal + O(n) for finding max streak
        Space : O(N) hashset 
